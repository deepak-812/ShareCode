{"ast":null,"code":"var _jsxFileName = \"E:\\\\share-edit\\\\src\\\\components\\\\Editor.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Codemirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/theme/paraiso-dark.css';\nimport 'codemirror/theme/material-palenight.css';\nimport 'codemirror/theme/monokai.css';\nimport 'codemirror/theme/duotone-light.css';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/addon/edit/closetag';\nimport 'codemirror/addon/edit/closebrackets';\nimport ACTIONS from '../Actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Editor = _ref => {\n  _s();\n\n  let {\n    socketRef,\n    roomId,\n    onCodeChange\n  } = _ref;\n  const editorRef = useRef(null); // state \n\n  const [colorTheme, setColorTheme] = useState('dracula'); // efffect\n\n  useEffect(() => {\n    const currentThemeColor = localStorage.getItem('theme-color');\n\n    if (currentThemeColor) {\n      setColorTheme(currentThemeColor);\n    }\n  }, []);\n  useEffect(() => {\n    async function init() {\n      editorRef.current = Codemirror.fromTextArea(document.getElementById('realtimeEditor'), {\n        mode: {\n          name: 'javascript',\n          json: true\n        },\n        theme: 'dracula',\n        autoCloseTags: true,\n        autoCloseBrackets: true,\n        lineNumbers: true\n      });\n      editorRef.current.on('change', (instance, changes) => {\n        const {\n          origin\n        } = changes;\n        const code = instance.getValue();\n        onCodeChange(code);\n\n        if (origin !== 'setValue') {\n          socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n            roomId,\n            code\n          });\n        }\n      });\n    }\n\n    init();\n  }, []);\n  useEffect(() => {\n    if (socketRef.current) {\n      socketRef.current.on(ACTIONS.CODE_CHANGE, _ref2 => {\n        let {\n          code\n        } = _ref2;\n\n        if (code !== null) {\n          editorRef.current.setValue(code);\n        }\n      });\n    }\n\n    return () => {\n      socketRef.current.off(ACTIONS.CODE_CHANGE);\n    };\n  }, [socketRef.current]);\n  return /*#__PURE__*/_jsxDEV(\"textarea\", {\n    id: \"realtimeEditor\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"theme-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"single-theme active\",\n        id: \"th1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 12\n  }, this);\n};\n\n_s(Editor, \"We0dU7yF63cMR7O75QJXvGQlq9U=\");\n\n_c = Editor;\nexport default Editor;\n\nvar _c;\n\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Codemirror","ACTIONS","Editor","socketRef","roomId","onCodeChange","editorRef","colorTheme","setColorTheme","currentThemeColor","localStorage","getItem","init","current","fromTextArea","document","getElementById","mode","name","json","theme","autoCloseTags","autoCloseBrackets","lineNumbers","on","instance","changes","origin","code","getValue","emit","CODE_CHANGE","setValue","off"],"sources":["E:/share-edit/src/components/Editor.js"],"sourcesContent":["import React, { useState , useEffect, useRef } from 'react';\nimport Codemirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/theme/paraiso-dark.css';\nimport 'codemirror/theme/material-palenight.css';\nimport 'codemirror/theme/monokai.css';\nimport 'codemirror/theme/duotone-light.css';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/addon/edit/closetag';\nimport 'codemirror/addon/edit/closebrackets';\nimport ACTIONS from '../Actions';\n\nconst Editor = ({ socketRef, roomId, onCodeChange }) => {\n    const editorRef = useRef(null);\n\n    // state \n    const [colorTheme,setColorTheme] = useState('dracula');\n    \n    // efffect\n    useEffect(()   => {\n       const currentThemeColor = localStorage.getItem('theme-color');\n         if(currentThemeColor){\n            setColorTheme(currentThemeColor);\n         }\n    },[])\n\n\n\n    useEffect(() => {\n        async function init() {\n            editorRef.current = Codemirror.fromTextArea(\n                document.getElementById('realtimeEditor'),\n                {\n                    mode: { name: 'javascript', json: true },\n                    theme: 'dracula',\n                    autoCloseTags: true,\n                    autoCloseBrackets: true,\n                    lineNumbers: true,\n                }\n            );\n\n            editorRef.current.on('change', (instance, changes) => {\n                const { origin } = changes;\n                const code = instance.getValue();\n                onCodeChange(code);\n                if (origin !== 'setValue') {\n                    socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n                        roomId,\n                        code,\n                    });\n                }\n            });\n        }\n        init();\n    }, []);\n\n    useEffect(() => {\n        if (socketRef.current) {\n            socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\n                if (code !== null) {\n                    editorRef.current.setValue(code);\n                }\n            });\n        }\n\n        return () => {\n            socketRef.current.off(ACTIONS.CODE_CHANGE);\n        };\n    }, [socketRef.current]);\n\n    return <textarea id=\"realtimeEditor\">\n        <div className=\"theme-section\">\n            <div className=\"single-theme active\" id='th1'></div>\n        </div>\n    </textarea>;\n};\n\nexport default Editor;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA2BC,SAA3B,EAAsCC,MAAtC,QAAoD,OAApD;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,+BAAP;AACA,OAAO,8BAAP;AACA,OAAO,mCAAP;AACA,OAAO,yCAAP;AACA,OAAO,8BAAP;AACA,OAAO,oCAAP;AACA,OAAO,uCAAP;AACA,OAAO,gCAAP;AACA,OAAO,qCAAP;AACA,OAAOC,OAAP,MAAoB,YAApB;;;AAEA,MAAMC,MAAM,GAAG,QAAyC;EAAA;;EAAA,IAAxC;IAAEC,SAAF;IAAaC,MAAb;IAAqBC;EAArB,CAAwC;EACpD,MAAMC,SAAS,GAAGP,MAAM,CAAC,IAAD,CAAxB,CADoD,CAGpD;;EACA,MAAM,CAACQ,UAAD,EAAYC,aAAZ,IAA6BX,QAAQ,CAAC,SAAD,CAA3C,CAJoD,CAMpD;;EACAC,SAAS,CAAC,MAAQ;IACf,MAAMW,iBAAiB,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAA1B;;IACE,IAAGF,iBAAH,EAAqB;MAClBD,aAAa,CAACC,iBAAD,CAAb;IACF;EACL,CALQ,EAKP,EALO,CAAT;EASAX,SAAS,CAAC,MAAM;IACZ,eAAec,IAAf,GAAsB;MAClBN,SAAS,CAACO,OAAV,GAAoBb,UAAU,CAACc,YAAX,CAChBC,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,CADgB,EAEhB;QACIC,IAAI,EAAE;UAAEC,IAAI,EAAE,YAAR;UAAsBC,IAAI,EAAE;QAA5B,CADV;QAEIC,KAAK,EAAE,SAFX;QAGIC,aAAa,EAAE,IAHnB;QAIIC,iBAAiB,EAAE,IAJvB;QAKIC,WAAW,EAAE;MALjB,CAFgB,CAApB;MAWAjB,SAAS,CAACO,OAAV,CAAkBW,EAAlB,CAAqB,QAArB,EAA+B,CAACC,QAAD,EAAWC,OAAX,KAAuB;QAClD,MAAM;UAAEC;QAAF,IAAaD,OAAnB;QACA,MAAME,IAAI,GAAGH,QAAQ,CAACI,QAAT,EAAb;QACAxB,YAAY,CAACuB,IAAD,CAAZ;;QACA,IAAID,MAAM,KAAK,UAAf,EAA2B;UACvBxB,SAAS,CAACU,OAAV,CAAkBiB,IAAlB,CAAuB7B,OAAO,CAAC8B,WAA/B,EAA4C;YACxC3B,MADwC;YAExCwB;UAFwC,CAA5C;QAIH;MACJ,CAVD;IAWH;;IACDhB,IAAI;EACP,CA1BQ,EA0BN,EA1BM,CAAT;EA4BAd,SAAS,CAAC,MAAM;IACZ,IAAIK,SAAS,CAACU,OAAd,EAAuB;MACnBV,SAAS,CAACU,OAAV,CAAkBW,EAAlB,CAAqBvB,OAAO,CAAC8B,WAA7B,EAA0C,SAAc;QAAA,IAAb;UAAEH;QAAF,CAAa;;QACpD,IAAIA,IAAI,KAAK,IAAb,EAAmB;UACftB,SAAS,CAACO,OAAV,CAAkBmB,QAAlB,CAA2BJ,IAA3B;QACH;MACJ,CAJD;IAKH;;IAED,OAAO,MAAM;MACTzB,SAAS,CAACU,OAAV,CAAkBoB,GAAlB,CAAsBhC,OAAO,CAAC8B,WAA9B;IACH,CAFD;EAGH,CAZQ,EAYN,CAAC5B,SAAS,CAACU,OAAX,CAZM,CAAT;EAcA,oBAAO;IAAU,EAAE,EAAC,gBAAb;IAAA,uBACH;MAAK,SAAS,EAAC,eAAf;MAAA,uBACI;QAAK,SAAS,EAAC,qBAAf;QAAqC,EAAE,EAAC;MAAxC;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA;EADG;IAAA;IAAA;IAAA;EAAA,QAAP;AAKH,CA/DD;;GAAMX,M;;KAAAA,M;AAiEN,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}