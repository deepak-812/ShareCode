{"ast":null,"code":"var _jsxFileName = \"E:\\\\share-edit\\\\src\\\\pages\\\\EditorPage.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState } from 'react';\n// import Client from '../components/Client';\n// import Editor from '../components/Editor';\n// const EditorPage = () => {\n//   const [clients,setClients] = useState([{socketId: 1, username: 'Rakesh k'},\n//   {socketId: 2, username: 'John Doe'},\n//   {socketId: 3, username: 'Akash Sharma'}]);\n//   return (\n//     <div className=\"mainWrap\">\n//         <div className='aside'>\n//           <div className=\"asideInner\">\n//             <div className=\"logo\">\n//               <img className=\"logoImage\" src='/app_logo.png' alt=\"app-logo\"/>\n//             </div>\n//             <h3>Connected</h3>\n//             <div className=\"clientsList\">\n//                         {clients.map((client) => (\n//                             <Client\n//                                 key={client.socketId}\n//                                 username={client.username}\n//                             />\n//                         ))}\n//             </div>\n//           </div>\n//           <button className='btn copyBtn'>Copy ROOM ID</button>\n//           <button className='btn leaveBtn'>Leave</button>\n//         </div>\n//         <div className=\"editorWrap\">\n//             <Editor />\n//         </div>\n//     </div>\n//   )\n// }\n// export default EditorPage\nimport React, { useState, useRef, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport ACTIONS from '../Actions';\nimport Client from '../components/Client';\nimport Editor from '../components/Editor';\nimport { initSocket } from '../socket';\nimport { useLocation, useNavigate, Navigate, useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditorPage = () => {\n  _s();\n\n  const socketRef = useRef(null);\n  const codeRef = useRef(null);\n  const location = useLocation();\n  const {\n    roomId\n  } = useParams();\n  const reactNavigator = useNavigate();\n  const [clients, setClients] = useState([]);\n  useEffect(() => {\n    const init = async () => {\n      var _location$state;\n\n      socketRef.current = await initSocket();\n      socketRef.current.on('connect_error', err => handleErrors(err));\n      socketRef.current.on('connect_failed', err => handleErrors(err));\n\n      function handleErrors(e) {\n        console.log('socket error', e);\n        toast.error('Socket connection failed, try again later.');\n        reactNavigator('/');\n      }\n\n      socketRef.current.emit(ACTIONS.JOIN, {\n        roomId,\n        username: (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.username\n      }); // Listening for joined event\n\n      socketRef.current.on(ACTIONS.JOINED, _ref => {\n        var _location$state2;\n\n        let {\n          clients,\n          username,\n          socketId\n        } = _ref;\n\n        if (username !== ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.username)) {\n          toast.success(`${username} joined the room.`);\n          console.log(`${username} joined`);\n        }\n\n        setClients(clients);\n        socketRef.current.emit(ACTIONS.SYNC_CODE, {\n          code: codeRef.current,\n          socketId\n        });\n      }); // Listening for disconnected\n\n      socketRef.current.on(ACTIONS.DISCONNECTED, _ref2 => {\n        let {\n          socketId,\n          username\n        } = _ref2;\n        toast.success(`${username} left the room.`);\n        setClients(prev => {\n          return prev.filter(client => client.socketId !== socketId);\n        });\n      });\n    };\n\n    init();\n    return () => {\n      socketRef.current.disconnect();\n      socketRef.current.off(ACTIONS.JOINED);\n      socketRef.current.off(ACTIONS.DISCONNECTED);\n    };\n  }, []);\n\n  async function copyRoomId() {\n    try {\n      await navigator.clipboard.writeText(roomId);\n      toast.success('Room ID has been copied to your clipboard');\n    } catch (err) {\n      toast.error('Could not copy the Room ID');\n      console.error(err);\n    }\n  }\n\n  function leaveRoom() {\n    reactNavigator('/');\n  }\n\n  if (!location.state) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainWrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"aside\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"asideInner\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"logoImage\",\n            src: \"/code-sync.png\",\n            alt: \"logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Connected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"clientsList\",\n          children: clients.map(client => /*#__PURE__*/_jsxDEV(Client, {\n            username: client.username\n          }, client.socketId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn copyBtn\",\n        onClick: copyRoomId,\n        children: \"Copy ROOM ID\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn leaveBtn\",\n        onClick: leaveRoom,\n        children: \"Leave\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editorWrap\",\n      children: /*#__PURE__*/_jsxDEV(Editor, {\n        socketRef: socketRef,\n        roomId: roomId,\n        onCodeChange: code => {\n          codeRef.current = code;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditorPage, \"O5aMOdwt2wCnuqVQk7SgEgKtMHE=\", false, function () {\n  return [useLocation, useParams, useNavigate];\n});\n\n_c = EditorPage;\nexport default EditorPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditorPage\");","map":{"version":3,"names":["React","useState","useRef","useEffect","toast","ACTIONS","Client","Editor","initSocket","useLocation","useNavigate","Navigate","useParams","EditorPage","socketRef","codeRef","location","roomId","reactNavigator","clients","setClients","init","current","on","err","handleErrors","e","console","log","error","emit","JOIN","username","state","JOINED","socketId","success","SYNC_CODE","code","DISCONNECTED","prev","filter","client","disconnect","off","copyRoomId","navigator","clipboard","writeText","leaveRoom","map"],"sources":["E:/share-edit/src/pages/EditorPage.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import Client from '../components/Client';\r\n// import Editor from '../components/Editor';\r\n\r\n// const EditorPage = () => {\r\n//   const [clients,setClients] = useState([{socketId: 1, username: 'Rakesh k'},\r\n//   {socketId: 2, username: 'John Doe'},\r\n//   {socketId: 3, username: 'Akash Sharma'}]);\r\n//   return (\r\n//     <div className=\"mainWrap\">\r\n//         <div className='aside'>\r\n//           <div className=\"asideInner\">\r\n//             <div className=\"logo\">\r\n//               <img className=\"logoImage\" src='/app_logo.png' alt=\"app-logo\"/>\r\n//             </div>\r\n//             <h3>Connected</h3>\r\n//             <div className=\"clientsList\">\r\n//                         {clients.map((client) => (\r\n//                             <Client\r\n//                                 key={client.socketId}\r\n//                                 username={client.username}\r\n//                             />\r\n//                         ))}\r\n//             </div>\r\n//           </div>\r\n//           <button className='btn copyBtn'>Copy ROOM ID</button>\r\n//           <button className='btn leaveBtn'>Leave</button>\r\n//         </div>\r\n//         <div className=\"editorWrap\">\r\n//             <Editor />\r\n//         </div>\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n// export default EditorPage\r\n\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport toast from 'react-hot-toast';\r\nimport ACTIONS from '../Actions';\r\nimport Client from '../components/Client';\r\nimport Editor from '../components/Editor';\r\nimport { initSocket } from '../socket';\r\nimport {\r\n    useLocation,\r\n    useNavigate,\r\n    Navigate,\r\n    useParams,\r\n} from 'react-router-dom';\r\n\r\nconst EditorPage = () => {\r\n    const socketRef = useRef(null);\r\n    const codeRef = useRef(null);\r\n    const location = useLocation();\r\n    const { roomId } = useParams();\r\n    const reactNavigator = useNavigate();\r\n    const [clients, setClients] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const init = async () => {\r\n            socketRef.current = await initSocket();\r\n            socketRef.current.on('connect_error', (err) => handleErrors(err));\r\n            socketRef.current.on('connect_failed', (err) => handleErrors(err));\r\n\r\n            function handleErrors(e) {\r\n                console.log('socket error', e);\r\n                toast.error('Socket connection failed, try again later.');\r\n                reactNavigator('/');\r\n            }\r\n\r\n            socketRef.current.emit(ACTIONS.JOIN, {\r\n                roomId,\r\n                username: location.state?.username,\r\n            });\r\n\r\n            // Listening for joined event\r\n            socketRef.current.on(\r\n                ACTIONS.JOINED,\r\n                ({ clients, username, socketId }) => {\r\n                    if (username !== location.state?.username) {\r\n                        toast.success(`${username} joined the room.`);\r\n                        console.log(`${username} joined`);\r\n                    }\r\n                    setClients(clients);\r\n                    socketRef.current.emit(ACTIONS.SYNC_CODE, {\r\n                        code: codeRef.current,\r\n                        socketId,\r\n                    });\r\n                }\r\n            );\r\n\r\n            // Listening for disconnected\r\n            socketRef.current.on(\r\n                ACTIONS.DISCONNECTED,\r\n                ({ socketId, username }) => {\r\n                    toast.success(`${username} left the room.`);\r\n                    setClients((prev) => {\r\n                        return prev.filter(\r\n                            (client) => client.socketId !== socketId\r\n                        );\r\n                    });\r\n                }\r\n            );\r\n        };\r\n        init();\r\n        return () => {\r\n            socketRef.current.disconnect();\r\n            socketRef.current.off(ACTIONS.JOINED);\r\n            socketRef.current.off(ACTIONS.DISCONNECTED);\r\n        };\r\n    }, []);\r\n\r\n    async function copyRoomId() {\r\n        try {\r\n            await navigator.clipboard.writeText(roomId);\r\n            toast.success('Room ID has been copied to your clipboard');\r\n        } catch (err) {\r\n            toast.error('Could not copy the Room ID');\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    function leaveRoom() {\r\n        reactNavigator('/');\r\n    }\r\n\r\n    if (!location.state) {\r\n        return <Navigate to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"mainWrap\">\r\n            <div className=\"aside\">\r\n                <div className=\"asideInner\">\r\n                    <div className=\"logo\">\r\n                        <img\r\n                            className=\"logoImage\"\r\n                            src=\"/code-sync.png\"\r\n                            alt=\"logo\"\r\n                        />\r\n                    </div>\r\n                    <h3>Connected</h3>\r\n                    <div className=\"clientsList\">\r\n                        {clients.map((client) => (\r\n                            <Client\r\n                                key={client.socketId}\r\n                                username={client.username}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                <button className=\"btn copyBtn\" onClick={copyRoomId}>\r\n                    Copy ROOM ID\r\n                </button>\r\n                <button className=\"btn leaveBtn\" onClick={leaveRoom}>\r\n                    Leave\r\n                </button>\r\n            </div>\r\n            <div className=\"editorWrap\">\r\n                <Editor\r\n                    socketRef={socketRef}\r\n                    roomId={roomId}\r\n                    onCodeChange={(code) => {\r\n                        codeRef.current = code;\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EditorPage;\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}